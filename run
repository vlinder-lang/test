#!/usr/bin/env python2
from __future__ import print_function

import difflib
import os
import os.path
import shutil
import subprocess
import tempfile

def compile(test_case, output_dir):
    args = ["../log/src", "../text/src", "../test/cases/" + test_case, output_dir]
    vlinderc = subprocess.Popen(
        ["java", "-jar", "../vlinderc/target/scala-2.11/vlinderc-assembly-0.0.1.jar"] + args,
        cwd="../vlinderc",
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    stdout, stderr = vlinderc.communicate()
    if stderr == "":
        return
    else:
        raise Exception(stderr)

def execute(test_case, module_dir):
    node = os.path.normpath("../horror/node_modules/.bin/babel-node.cmd")
    output = subprocess.check_output([node, "../horror/main.js", module_dir])
    with open(os.path.join("cases", test_case, "output.txt")) as file:
        expected_output = file.read()
    if output != expected_output:
        diff = difflib.unified_diff(output.splitlines(), expected_output.splitlines())
        raise Exception("\n".join(diff))

def test(test_case):
    print(test_case, end="")
    output_dir = tempfile.mkdtemp()
    try:
        compile(test_case, output_dir)
        execute(test_case, module_dir=output_dir)
    except Exception as e:
        print(" [ERROR]\n" + e.message + "\n")
    else:
        print(" [OK]")
    finally:
        shutil.rmtree(output_dir)

def main():
    subprocess.check_call(["sbt.bat", "assembly"], cwd="../vlinderc")
    for test_case in os.listdir("cases"):
        test(test_case)

if __name__ == "__main__":
    main()
